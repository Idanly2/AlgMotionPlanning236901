#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
236901 - Algorithmic Robot Motion Planning
\end_layout

\begin_layout Author
Sapir Tubul 305728180
\begin_inset Newline newline
\end_inset

Idan Lev Yehudi 206741878
\end_layout

\begin_layout Part*
2.2 - Robot Modeling
\end_layout

\begin_layout Standard
We will detail our approach for implementing each of the requested functions.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\text{compute\_distance}$
\end_inset

 - We tested two different functions for computing distances between configurati
ons.
 The first (
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $d_{1}$
\end_inset


\begin_inset Quotes erd
\end_inset

) is simply the euclidean distance between the end effector in each of the
 configurations.
 The second (
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $d_{2}$
\end_inset


\begin_inset Quotes erd
\end_inset

) is the sum of euclidean distances between each corresponding link in the
 two configurations.
 We tested paths generated with both methods, and ultimately chose 
\begin_inset Formula $d_{2}$
\end_inset

 because its paths were smoother.
 The intuition is that in 
\begin_inset Formula $d_{1}$
\end_inset

, two very different configurations can result in a 
\begin_inset Formula $0$
\end_inset

 distance, if simply the end effector position is the same.
 On the other hand, 
\begin_inset Formula $d_{2}$
\end_inset

 will output 
\begin_inset Formula $0$
\end_inset

 only if the configurations are exactly the same, and so close configurations
 according to 
\begin_inset Formula $d_{2}$
\end_inset

 are only those that require little movement in the workspace.
\begin_inset Newline newline
\end_inset

In both of the cases, the workspace positions of each of the links are determine
d using the function 
\begin_inset Formula $\text{compute\_forward\_kinematics}$
\end_inset

, described later.
 The distance/sum of distances is computed using standard numpy functions.
\end_layout

\begin_layout Itemize
\begin_inset Formula $\text{compute\_forward\_kinematics}$
\end_inset

 - Assuming the configuration given is 
\begin_inset Formula $(c_{1},c_{2},c_{3},c_{4})$
\end_inset

, the links positions are computed iteratively according to the following
 formula:
\begin_inset Newline newline
\end_inset


\begin_inset Formula 
\[
\left(\begin{array}{c}
x_{i}\\
y_{i}\\
\theta_{i}
\end{array}\right)=\left(\begin{array}{c}
x_{i-1}+r_{i}\cdot\cos\left(\theta_{i-1}+c_{i}\right)\\
y_{i-1}+r_{i}\cdot\sin\left(\theta_{i-1}+c_{i}\right)\\
\mathrm{wrap_{[-\pi,\pi)}}\left(\theta_{i-1}+c_{i}\right)
\end{array}\right)
\]

\end_inset


\begin_inset Newline newline
\end_inset

In words: each link position is the vector addition of the previous link
 position, and the current link length in the current direction.
 We assume that 
\begin_inset Formula $(x_{0},y_{0},\theta_{0})$
\end_inset

 is the base of the manipulator.
\end_layout

\begin_layout Itemize
validate_robot - To validate that there are no self intersections of the
 robot, we construct a Shapely LineString object from the links position
 (computed using 
\begin_inset Formula $\text{compute\_forward\_kinematics}$
\end_inset

).
 A LineString object has an attribute 
\begin_inset Formula $\text{is\_simple}$
\end_inset

, which is True when the LineString does not self intersect, so we simply
 return this value.
\end_layout

\begin_layout Part*
2.3 - Motion Planning
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
